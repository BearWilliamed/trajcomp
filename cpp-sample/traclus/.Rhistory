source("show.R")
source("show.R")
source("show.R")
source("show.R")
source("show.R")
apply(A,1,ncol)
apply(A,1,function(x){print(x);})
apply(A,1,function(x){print(x$x1);})
apply(A,1,function(x){print(class(x));})
apply(A,1,function(x){print(class(x));})A
A
A[1,]
A$x1
dapply(A,1,function(x){print(class(x));})A
ddpply(A,.(cluster),function(x){print(class(x));})A
ddpply(A,.(cluster),function(x){print(class(x));})
ddply(A,.(cluster),function(x){print(class(x));})A
ddply(A,.(cluster),function(x){print(class(x));})
ddply(A,.(cluster),function(x){
print(x)
})
ddply(A,.(cluster),function(x){
print(x[1,4])
})
})
ddply(A,.(cluster),function(x){
ddply(A,.(cluster),function(x){
print(x$trajectory_id)
})
A
colnames(A)
colnames(A)
ddply(A,.(cluster),function(x){
print(x$trajectory_index)
})
})
ddply(A,.(cluster),function(x){
ddply(A,.(cluster),function(x){
print(unique(sort(x$trajectory_index)))
})
ddply(A,.(cluster),function(x){
print(unique(sort(x$trajectory_index)))
})
})
ddply(A,.(cluster),function(x){
print(unique(sort(x$trajectory_index)))
return 0;
})
ddply(A,.(cluster),function(x){
print(unique(sort(x$trajectory_index)))
return 0;
})
return 0;ddply(A,.(cluster),function(x){
print(unique(sort(x$trajectory_index)));
return (0);
})
ddply(A,.(cluster),function(x){
print(unique(sort(x$trajectory_index)));
return (0);
})
return (0);ddply(A,.(cluster),function(x){
apply(unique(sort(x$trajectory_index))),2,print)
return (0);
})
ddply(A,.(cluster),function(x){
apply(unique(sort(x$trajectory_index))),2,print)
return (0);
})
ddply(A,.(cluster),function(x){
apply(unique(sort(x$trajectory_index)),2,print)
return (0);
})
ddply(A,.(cluster),function(x){
apply(unique(sort(x$trajectory_index)),print)
return (0);
})
ddply(A,.(cluster),function(x){
apply(unique(sort(x$trajectory_index)),1,print)
return (0);
})
ddply(A,.(cluster),function(x){
apply(unique(sort(x$trajectory_index)),1,print)
return (0);
})
})ddply(A,.(cluster),function(x){
   trajectories = unique(sort(x$trajectory_index));
   print(trajectories);
return (0);
})
ddply(A,.(cluster),function(x){
   trajectories = unique(sort(x$trajectory_index));
   print(trajectories);
return (0);
})
ddply(A,.(cluster),function(x){
   trajectories = unique(sort(x$trajectory_index));
   for (t in trajectories){
       lines(B[B$V3==t],col=cluster_to_color(x$cluster[1]))
   }
   
return (0);
})
})ddply(A,.(cluster),function(x){
   trajectories = unique(sort(x$trajectory_index));
   for (t in trajectories){
       lines(B[B$V3==t],col=cluster_to_color(x$cluster))
   }
   return (0);
})
ddply(A,.(cluster),function(x){
   trajectories = unique(sort(x$trajectory_index));
   for (t in trajectories){
       lines(B[B$V3==t],col=cluster_to_color(x$cluster))
   }
   return (0);
})
ddply(A,.(cluster),function(x){
   trajectories = unique(sort(x$trajectory_index));
   for (t in trajectories){
       lines(B[B$V3==t],col=cluster_to_color(x$cluster))
   }
   return (0);
})
colnames(B)
colnames(A)
ddply(A,.(cluster),function(x){
   print(x$cluster)
   trajectories = unique(sort(x$trajectory_index));
   for (t in trajectories){
       lines(B[B$V3==t],col=cluster_to_color(x$cluster))
   }
   return (0);
})
ddply(A,.(cluster),function(x){
   print(x$cluster)
   trajectories = unique(sort(x$trajectory_index));
   for (t in trajectories){
       lines(subset(B[B$V3==t,],select=c("V1","V2")),col=cluster_to_color(x$cluster))
   }
   return (0);
})
source("show.R")
source("show.R")
source("show.R")
?warnings
warnings
warnings/()
warnings()
source("show.R")
source("show.R")
source("show.R")
source("show.R")
B$V3
B
library(trajcomp)
addNaN(B)
addNaNs(B)
addNA(B)
B
tsplit(B)
q = tsplit(B)
q
ldply(B)
ldply(B)B
B
unique(B$V3)
B
B
B
source("show.R")
source("show.R")
source("show.R")
source("show.R")
source("show.R")
source("show.R")
pdf("show.pdf");
source("show.R")
dev.off();
quit()
